{"version":3,"sources":["ChatKit.js","LoginWindow.jsx","MessageList.jsx","UserList.jsx","Compose.jsx","ChatWindow.jsx","App.js","reportWebVitals.js","index.js"],"names":["this","url","user_list","stream","streamToken","message_list","messageToken","console","log","timestamp","date","Date","toLocaleDateString","toLocaleTimeString","username","password","Promise","resolve","reject","form","FormData","append","request","XMLHttpRequest","open","send","onreadystatechange","readyState","status","data","JSON","parse","responseText","message_token","stream_token","loginStatus","users","Array","from","sort","item","push","clear_users","message","Set","update_users","type","time","date_format","user","msg","add","delete","onChatUpdate","handleDisconnect","EventSource","handler_update_users","bind","handler_new_message","new_message","handler_depart_message","depart_message","handler_server_status","server_status","handler_handle_disconnect","handle_disconnect","handler_new_user","new_user","addEventListener","event","target","clear_up","kicked","close","setRequestHeader","getResponseHeader","newMessageToken","LoginWindow","props","handleChange","name","setState","value","state","handleSubmit","preventDefault","ChatKit","login","then","tryLogin","alert","className","onSubmit","onChange","Component","MessageList","scrollToBottom","setTimeout","messagesEnd","scrollIntoView","behavior","ParseMsg","thisUser","color","text-shadow","MsgsProp","map","index","style","float","clear","ref","el","UserList","Compose","prepareMessage","onSend","curMessageToken","messageTokenProp","send_msg","placeholderMsg","disabled","placeholder","ChatWindow","start_stream","connectedColor","App","onLogin","res","isLoggedIn","handleDisconect","windowDisplay","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.de80549d.chunk.js","sourcesContent":["class ChatKit\n{\n    constructor(){\n        this.url = \"\";\n\n        this.user_list = [];\n        this.stream = null;\n        this.streamToken = null\n        this.message_list = [];\n        this.messageToken = null;\n        this.stream = null;\n        console.log('contruct chat kit service')\n    }\n\n    date_format(timestamp) {\n        var date = new Date(timestamp * 1000);\n        return date.toLocaleDateString(\"en-US\") + \" \" + date.toLocaleTimeString(\"en-US\");\n    }\n\n    clear_up(){\n        this.url = \"http://localhost:3001\";\n\n        this.user_list = [];\n        this.stream = null;\n        this.streamToken = null;\n\n        this.message_list = []\n        this.messageToken = null;\n        this.stream = null;\n    }\n    //https://stackoverflow.com/questions/37217658/return-value-from-onreadystatechange-with-callback\n    login(url, username, password) {\n        this.url = url\n\n        return new Promise((resolve, reject)=>{\n            var form = new FormData();\n            form.append(\"password\", password);\n            form.append(\"username\", username);\n\n            var request = new XMLHttpRequest();\n            request.open(\"POST\", url + \"/login\");\n            console.log(\"send login information\")\n            request.send(form);\n\n            request.onreadystatechange = function() {\n                if (request.readyState !== 4) return;\n                if (request.status === 201) {\n                    const data = JSON.parse(request.responseText);\n                    //console.log(data);\n                    this.messageToken = data.message_token;\n                    this.streamToken = data.stream_token;\n                    resolve({loginStatus:true, \n                             streamToken: this.streamToken,\n                             messageToken: this.messageToken,\n                             username: username});\n                } else if (request.status === 403) {\n                    reject(\"Invalid username or password\");\n                } else if (request.status === 409) {\n                    reject(username + \" is already logged in\");\n                } else {\n                    reject(request.status + \" failure to /login!\");\n                }\n            };\n        })\n    }\n\n    update_users(users) {\n        this.user_list = [];\n        for (let item of Array.from(users).sort()) {\n            this.user_list.push(item);\n        }\n    }\n\n    handle_disconnect(clear_users) {\n        //message.disabled = true;\n        this.message = \"Please connect to send messages.\";\n        //title.classList.add(\"disconnected\");\n        if (clear_users) {\n            let users = new Set();\n            this.update_users(users);\n        }\n    }\n\n    new_message(data){\n        this.message_list.push({\n                    type: 'MSG',\n                    time: this.date_format(data[\"created\"]),\n                    user: data.user,\n                    msg: data.message\n                });\n    }\n\n    new_user(data){\n        let users = new Set(this.user_list)\n        users.add(data.user);\n        this.update_users(users);\n        this.message_list.push({\n            type: 'Join',\n            time: this.date_format(data[\"created\"]),\n            user: data.user\n        })\n    }\n\n    depart_message(data){\n        let users = new Set(this.user_list);\n        users.delete(data.user);\n        this.update_users(users);\n        this.message_list.push({\n                    type: 'Part',\n                    time: this.date_format(data[\"created\"]),\n                    user: data.user,\n                    msg: \"Part\"\n                });\n    }\n\n    server_status(data){\n        this.message_list.push({\n                    type: 'ServerStatus',\n                    time: this.date_format(data[\"created\"]),\n                    msg: data.status\n                });\n    }\n\n    show_login() {\n        this.url = \"\";\n        this.username = \"\"\n        this.password = \"\"\n    }\n\n    start_stream(onChatUpdate, handleDisconnect, streamToken) {\n        console.log('start event connection!')\n\n        this.streamToken = streamToken\n        var stream = new EventSource(\n            this.url + \"/stream/\" + this.streamToken\n        );\n        //bind event handler\n        var handler_update_users = this.update_users.bind(this);\n        var handler_new_message = this.new_message.bind(this);\n        var handler_depart_message =  this.depart_message.bind(this);\n        var handler_server_status = this.server_status.bind(this);\n        var handler_handle_disconnect = this.handle_disconnect.bind(this);\n        var handler_new_user = this.new_user.bind(this);\n        \n        //stream/errors\n        stream.addEventListener(\n            \"error\",\n            event=>{\n                console.log('error');\n                if (event.target.readyState === 2) {\n                    this.messageToken = null;\n                    this.streamToken = null;\n                    handler_handle_disconnect(true);\n                    this.clear_up.bind(this);\n                    handleDisconnect();\n                } else {\n                    handler_handle_disconnect(false);\n                    console.log(\"Disconnected, retrying\");\n                };\n                onChatUpdate({\n                    user_list: this.user_list,\n                    message_list: this.message_list,\n                    kicked: true}\n                );\n            },\n            false\n        );\n\n        //stream/users\n        stream.addEventListener(\n            \"Users\",\n            event => {\n                console.log('users');\n                let users = new Set(JSON.parse(event.data).users);\n                handler_update_users(users);\n                onChatUpdate({\n                    user_list: this.user_list,\n                    message_list: this.message_list,\n                    kicked: false}\n                );\n            },\n            false\n        );\n\n        ///stream/open\n        stream.addEventListener(\n            \"open\",\n            ()=>{\n                console.log('open');\n                //this.handle_connect.bind(this);\n            }\n        );\n\n        ///stream/disconnect\n        stream.addEventListener(\n            \"Disconnect\",\n            ()=>{\n                console.log('Disconnect');\n                stream.close();\n                handler_handle_disconnect(true);\n                this.clear_up.bind(this);\n                handleDisconnect();\n                onChatUpdate({\n                    user_list: this.user_list,\n                    message_list: this.message_list,\n                    kicked: true}\n                );\n            },\n            false\n        );\n\n        ///stream/join\n        stream.addEventListener(\n            \"Join\",\n            event => {\n                console.log('Join');\n                var data = JSON.parse(event.data);\n                handler_new_user(data);\n                onChatUpdate({\n                    user_list: this.user_list,\n                    message_list: this.message_list,\n                    kicked: false}\n                );\n            },\n            false\n        );\n\n        /////stream/message\n        stream.addEventListener(\n            \"Message\",\n            event => {\n                console.log('message');\n                var data = JSON.parse(event.data);\n\n                handler_new_message(data);\n                onChatUpdate({\n                    user_list: this.user_list,\n                    message_list: this.message_list,\n                    kicked: false}\n                );\n            },\n            false\n        );\n\n        ///stream/part\n        stream.addEventListener(\n            \"Part\",\n            event => {\n                console.log('part');\n                var data = JSON.parse(event.data);\n                handler_depart_message(data);\n                //console.log(this.message_list)\n                //console.log(this.user_list)\n                onChatUpdate({\n                    user_list: this.user_list,\n                    message_list: this.message_list,\n                    kicked: false}\n                );\n            },\n            false\n        );\n\n        ///stream/serverStatus\n        stream.addEventListener(\n            \"ServerStatus\",\n            event => {\n                console.log('serverStatus');\n                var data = JSON.parse(event.data);\n                handler_server_status(data);\n                onChatUpdate({\n                    user_list: this.user_list,\n                    message_list: this.message_list,\n                    kicked: false}\n                );\n            },\n            false\n        );\n    }\n\n    send_msg(message, messageToken){\n        //this.message = message;\n        this.messageToken = messageToken;\n        console.log(\"send_msg\")\n\n        return new Promise((resolve, reject)=>{\n            var form = new FormData();\n            form.append(\"message\", message);\n\n            var request = new XMLHttpRequest();\n            request.open(\"POST\", this.url + \"/message\");\n            request.setRequestHeader(\n                \"Authorization\",\n                \"Bearer \" + this.messageToken\n             );\n            request.send(form);\n            //this.message = \"\";\n            request.onreadystatechange = function(event) {\n                //if target.readyState == 4, mean it start but not yet finished.\n                if(event.target.readyState!==4) return;\n                if (event.target.readyState === 4 && event.target.status !== 403 && this.messageToken !== null) {\n                    this.messageToken = event.target.getResponseHeader(\"token\");\n                    //console.log(\"send_msg newtoken: \" + this.messageToken);\n                    resolve({status: true,\n                             newMessageToken: this.messageToken});\n                }\n                else{\n                    reject(\"Message is not sent sucessfully!\");\n                }\n            }\n        })\n\n    }\n\n}\nexport default new ChatKit();\n","import ChatKit from \"./ChatKit\";\nimport { Component } from \"react\";\n\nclass LoginWindow extends Component{\n\tconstructor(props) {\n    \tsuper(props);\n    \tthis.state = {\n      \t\turl: \"https://chat.cs291.com\",\n      \t\tusername: \"\",\n      \t\tpassword: \"\"\n    \t};\n    \tthis.handleChange = this.handleChange.bind(this);\n    \tthis.handleSubmit = this.handleSubmit.bind(this);\n  \t}\n\n  \t//ref: \n  \t//https://stackoverflow.com/questions/53349628/how-to-make-dynamic-state-for-multiple-fields-in-react\n  \t// arrow function is strange\n  \thandleChange = name => event => {\n    \tthis.setState({\n        \t[name]: event.target.value,\n    \t});\n\t}\n\n\thandleSubmit(event) {\n    \tconsole.log(this.state.username + ' is login to chat server.');\n    \tevent.preventDefault();\n    \tChatKit.login(this.state.url, this.state.username,this.state.password).then(\n    \t\tresolve => {this.props.tryLogin(resolve)},\n      \t\treject =>{alert(reject)}\n      \t\t);\n    };\n\n  \trender(){\n  \t\treturn(\n\t\t\t<form className=\"login-modal\" onSubmit={this.handleSubmit}>\n\t\t\t    <h2>Login</h2>\n\t\t\t    <div className=\"login-page\">\n\t\t\t    \t<div>\n\t\t\t    \t   \t<label>Chat URL <br/>\n\t\t\t    \t   \t\t<input type=\"text\" value={this.state.url}\n\t\t\t    \t   \t\t onChange={this.handleChange('url')}/>\n\t\t\t    \t   \t</label>\n\t\t\t    \t</div>\n\t\t\t    \t<div>\n\t\t\t    \t    <label>Username <br />\n\t\t\t    \t    \t<input type=\"text\" value={this.state.username}\n\t\t\t    \t    \tonChange={this.handleChange('username')}/>\n\t\t\t    \t    </label>\n\t\t\t    \t</div>\n\t\t\t    \t<div>\n\t\t\t    \t    <label>Password <br/>\n\t\t\t    \t    \t<input type=\"password\" value={this.state.password}\n\t\t\t    \t    \tonChange={this.handleChange('password')}/>\n\t\t\t    \t    </label>\n\t\t\t    \t</div>\n\t\t\t    \t<div>\n\t\t\t    \t\t<br/>\n\t\t\t    \t    <label>\n\t\t\t    \t    \t<input type=\"submit\" value=\"Login\" />\n\t\t\t    \t    </label>\n\t\t\t    \t</div>\n\t\t\t    </div>\n\t\t\t</form>\n\t\t)\n\t}\n}\nexport default LoginWindow;\n","import { Component } from \"react\";\n\nclass MessageList extends Component{\n  \tconstructor(props) {\n      super(props);\n    }\n\n   \tscrollToBottom = () => {\n     \tsetTimeout(() => {\n       \t\tthis.messagesEnd && this.messagesEnd.scrollIntoView({ behavior: \"auto\" })\n    \t\t}, 0)\n  \t}\n\n   \tParseMsg = message_list=> {\n   \t  if(message_list)\n   \t  {\n   \t  \tthis.scrollToBottom();\n   \t  }\n      let item = message_list.item\n      //console.log()\n      switch (item.type) {\n        case 'ServerStatus':\n          return (\n            <li className=\"status-item\">\n                <p>{item.time} [STATUS]:  {item.msg}</p>\n            </li>\n           )\n        case 'Join':\n          return (\n            <li className=\"status-item\">\n                <p>{item.time} [JOIN]:  {item.user}</p>\n            </li>\n           )\n        case 'Part':\n          return (\n            <li className=\"status-item\">\n                <p>{item.time} [PART]:  {item.user}</p>\n            </li>\n           )\n        case 'MSG':\n          if (item.user === this.props.thisUser)\n          {\n            return (\n              <li className=\"my-msg\">\n                <p>{item.time} {item.user}: {item.msg} </p>\n            </li>\n            )\n          }\n          else{\n          return (\n            <li className=\"msg\">\n                <p>{item.time} {item.user}: {item.msg} </p>\n            </li>\n          )}\n        default:\n          return <li />\n      }\n    }\n\n   render(){\n   \tlet color =\"black\";\n   \tlet text_shadow = \"\";\n    if(this.props.kicked){\n        color = \"grey\";\n    }\n   \treturn(\n   \t\t<div className=\"chat\" color={color} text-shadow={text_shadow}>\n            <ul className=\"message_list\">\n              {this.props.MsgsProp.map((item, index) => (\n                <this.ParseMsg key={index} item={item} />\n              ))}\n              \n              <div style={{ float:\"left\", clear: \"both\" }}\n                ref={(el) => { this.messagesEnd = el; }}>\n              </div>\n            </ul>\n        </div>\n    )\n   }\n};\n\nexport default MessageList;","import { Component } from \"react\";\n\nclass UserList extends Component{\n  \tconstructor(props) {\n      super(props);\n    }\n   \trender(){\n   \t\tlet color =\"black\";\n        if(this.props.kicked){\n              color = \"grey\";\n        }\n   \t\treturn(\n   \t\t\t<div className=\"user_window\" color={color}>\n            \t<h2>Online</h2>\n            \t<ul className=\"users\" color={color}>\n              \t\t{this.props.user_list.map((item, index) => (\n              \t\t  <li key={index}>{item}</li>))\n              \t\t}\n            \t</ul>\n          \t</div>\n   \t\t)\n   \t}\n}\n\nexport default UserList;","import { Component } from \"react\";\nimport ChatKit from \"./ChatKit\";\n\nclass Compose extends Component{\n      constructor(props) {\n            super(props);\n            this.state = {\n                  message: \"\",\n                  messageToken: null\n            };\n      }\n      componentDidMount() {\n            this.onSend = this.onSend.bind(this);\n      }\n\n      prepareMessage = event => {\n            this.setState({message: event.target.value })\n      }\n\n      onSend = event => {\n            event.preventDefault();\n            let curMessageToken;\n            if(this.state.messageToken){\n              curMessageToken = this.state.messageToken;\n            }else{\n              curMessageToken =  this.props.messageTokenProp;\n            }\n            ChatKit.send_msg(this.state.message, curMessageToken).then(\n              resolve => {this.setState({message: '', \n                                         messageToken: resolve.newMessageToken})},\n              reject => {alert(reject)}\n            )\n            //console.log(\"after send msg token: \" + this.state.messageToken)\n  }\n\n   \trender(){\n            let placeholderMsg =\"\";\n            let disabled = false;\n            if(this.props.kicked){\n                  disabled = true;\n                  placeholderMsg = \"You're kicked off, please re-connect to server.\"\n            }\n            \n   \t\treturn(\n            \t<form onSubmit={this.onSend}>\n                        <input className=\"message\" type=\"text\" \n                               onChange={this.prepareMessage}\n                               value={this.state.message}\n                               disabled = {disabled}\n                               placeholder={placeholderMsg}/>\n                  </form>\n   \t\t)\n   \t}\n}\n\nexport default Compose;","import ChatKit from \"./ChatKit\";\nimport MessageList from \"./MessageList\";\nimport UserList from \"./UserList\"\nimport Compose from \"./Compose\"\nimport { Component } from \"react\";\n\nclass ChatWindow extends Component{\n  constructor(props) {\n      super(props);\n      this.state = {\n        user_list: [],\n        message_list: [],\n        kicked: false,\n        message: \"\",\n        messageToken: null\n      };\n    }\n\n  //this part will only be called when CharWindow is mounted\n  //otherwise, it will introduce error and multiple connection,\n  //result in confilict (status: 409)\n  componentDidMount() { \n    this.onChatUpdate = this.onChatUpdate.bind(this);\n    ChatKit.start_stream(this.onChatUpdate, this.handleDisconnect, this.props.streamToken);\n  }\n\n  onChatUpdate = data => {\n    console.log('callback:');\n    this.setState({\n      user_list: data.user_list,\n      message_list: data.message_list,\n      kicked: data.kicked\n    });\n  }\n\n  handleDisconnect = () => {\n    this.props.handleDisconnect();\n  }\n\n  render(){\n    let connectedColor = 'green';\n    if(this.state.kicked){\n      connectedColor = 'red';\n    }\n\n    return(\n      <div className=\"container\">\n        <h1 className=\"connected\" style={{color: connectedColor}}>CS291 Chat</h1>\n        <div className=\"window\">\n          <MessageList MsgsProp={this.state.message_list} \n                       thisUser={this.props.username}\n                       kicked={this.state.kicked}/>\n          <UserList user_list={this.state.user_list}\n                    kicked={this.state.kicked}/>\n        </div>\n        <Compose messageTokenProp={this.props.messageTokenProp}\n                 kicked={this.state.kicked}/>\n      </div>\n    )\n  }\n}\nexport default ChatWindow;","import { Component } from \"react\";\nimport \"./App.css\";\nimport LoginWindow from \"./LoginWindow\"\nimport ChatWindow from \"./ChatWindow\"\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {isLoggedIn: false,\n                  streamToken: null,\n                  messageToken: null,\n                  username:\"\"};\n  }\n\n  onLogin = res =>{\n    //console.log(res);\n    res.loginStatus && this.setState({isLoggedIn:true,\n                                      streamToken: res.streamToken,\n                                      messageToken: res.messageToken,\n                                      username: res.username})\n    //console.log(this.state.messageToken);\n  }\n\n  handleDisconect=()=>{\n    this.setState({isLoggedIn: false,\n                   streamToken: ''});\n  }\n\n  render() {\n    const isLoggedIn = this.state.isLoggedIn;\n    let windowDisplay;\n    if (isLoggedIn) { \n      windowDisplay = <ChatWindow handleDisconnect={this.handleDisconect} \n                                  streamToken={this.state.streamToken}\n                                  messageTokenProp={this.state.messageToken}\n                                  username={this.state.username}/>;    \n    }\n    else {      \n      windowDisplay = <LoginWindow tryLogin={this.onLogin}/>;    \n    }\n    return (\n      <div className=\"App\"> \n        {windowDisplay}\n      </div>\n    );\n  }\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}